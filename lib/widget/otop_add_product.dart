// ignore_for_file: library_private_types_in_public_api, use_build_context_synchronously

import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:flutter/material.dart';
import 'package:otop_front/models/otop_models.dart';
import 'package:otop_front/services/otop_product_service.dart'; // Ensure this service matches your API
import 'package:logger/logger.dart';

class AddProductDialog extends StatefulWidget {
  const AddProductDialog({super.key});

  @override
  _AddProductDialogState createState() => _AddProductDialogState();
}

class _AddProductDialogState extends State<AddProductDialog> {
  final Logger logger = Logger(level: Level.debug);

  final _formKey = GlobalKey<FormState>();
  String productName = '';
  String description = '';
  String? category;
  double price = 0.0;
  int quantity = 0;
 String? storeName; // To hold the selected value
  final List<String> stores = ['Store 1', 'Store 2', 'Store 3']; 
  final List<String> categ = ['Food', 'Non-Food']; 

 void _submitProduct() async {
  if (_formKey.currentState!.validate()) {
    try {
      // Assuming `supplierId` comes from the logged-in user's data
      int supplierId = 1; // Replace with actual supplier ID logic
      int maxSequentialNumber = 100; // Replace with logic to fetch the current max number
      String sequentialNumber = OtopProduct.generateSequentialNumber(maxSequentialNumber);

      OtopProduct newProduct = OtopProduct(
        id: 0, // Assuming ID is auto-generated by the backend
        name: productName,
        description: description,
        category: OtopProduct.validateCategory(category!),
        price: price,
        quantity: quantity,
        supplierId: supplierId,
        storeName: storeName ?? '',
        sequentialNumber: sequentialNumber,
      );

      logger.d('Submitting product: ${newProduct.toJson()}');

      bool success =
          await OtopProductServiceAdmin.createOtopProduct(newProduct);

      if (mounted) {
        if (success) {
          Navigator.of(context).pop(); // Close the dialog on success
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Product created successfully!')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text('Failed to create product. Please try again.')),
          );
        }
      }
    } catch (e) {
      logger.e('Error submitting product: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('An error occurred: $e')),
      );
    }
  }
}


  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add New Product'),
      content: SizedBox(
        // Set the width and height for the dialog content
        width: 400,  // Adjust height here
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              children: [
              DropdownButtonFormField2<String>(
                value: storeName, // Currently selected value
                items: stores
                    .map((store) => DropdownMenuItem<String>(
                          value: store,
                          child: Text(store),
                        ))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    storeName = value;
                  });
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a store name';
                  }
                  return null;
                },
                decoration: InputDecoration(
                  labelText: 'Select Store',
                  border: OutlineInputBorder(),
                ),
              ),
                const SizedBox(height: 20),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Product Name'),
                  onChanged: (value) => productName = value,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter the product name';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Description'),
                  onChanged: (value) => description = value,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a description';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),
              DropdownButtonFormField2<String>(
                value: category, // Currently selected value
                items: categ
                    .map((categ) => DropdownMenuItem<String>(
                          value: categ,
                          child: Text(categ),
                        ))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    category = value;
                  });
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a category name';
                  }
                  return null;
                },
                decoration: InputDecoration(
                  labelText: 'Select Store',
                  border: OutlineInputBorder(),
                ),
              ),
                const SizedBox(height: 20),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Price'),
                  keyboardType: TextInputType.number,
                  onChanged: (value) => price = double.tryParse(value) ?? 0.0,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a price';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Quantity'),
                  keyboardType: TextInputType.number,
                  onChanged: (value) => quantity = int.tryParse(value) ?? 0,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a quantity';
                    }
                    return null;
                  },
                ),
              ],
            ),
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(), // Close the dialog
          child: Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: _submitProduct,
          child: Text('Add Product'),
        ),
      ],
    );
  }
}
